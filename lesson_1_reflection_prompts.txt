How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    You can see what changed and search only there.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    
All the changes are recorded. In case in the future some modification is made that changes something that was already correct, you can return your revies an old version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    
The pros is that you can chose the best moment to create a commit and write a message explaining it, so it is easier to find versions to compare later. The cons are that you may forget and loose your job and you may save it at the wrong instants and create versions that don't make much sense, consequently not taking advantage of the pro.



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    
Because the others are not program oriented and do not consider that many files may be components of only one work.

How can you use the commands git log and git diff to view the history of files?

    


git log shows all the versions, their names and ids. git diff shows the difference between two files.

How might using version control make you more confident to make changes that
could break something?

  
Because it is possible to do a checkout and return to a previsou version.



Now that you have your workspace set up, what do you want to try using Git for?

    
To put my projects available online
